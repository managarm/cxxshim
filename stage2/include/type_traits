#ifndef _CXXSHIM_TYPE_TRAITS
#define _CXXSHIM_TYPE_TRAITS

#ifdef CXXSHIM_INTEGRATE_GCC

#include_next <type_traits>

#else // CXXSHIM_INTEGRATE_GCC

#include <stddef.h>

namespace std {

template<class T> struct remove_cv { typedef T type; };
template<class T> struct remove_cv<const T> { typedef T type; };
template<class T> struct remove_cv<volatile T> { typedef T type; };
template<class T> struct remove_cv<const volatile T> { typedef T type; };

template<class T, T v>
struct integral_constant {
	static constexpr T value = v;
	using value_type = T;
	using type = integral_constant;

	constexpr operator value_type() const noexcept {
		return value;
	}

	constexpr value_type operator()() const noexcept {
		return value;
	}
};

template <bool v>
using bool_constant = integral_constant<bool, v>;

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

#define _DEFINE_SPEC0(_Name, _Type, _Value) \
	template<> \
	struct _Name<_Type> \
	: public integral_constant<bool, _Value> { }

namespace detail {
	template <typename T>
	struct is_integral_helper : integral_constant<bool, false> { };

	_DEFINE_SPEC0(is_integral_helper, bool, true);
	_DEFINE_SPEC0(is_integral_helper, char, true);
	_DEFINE_SPEC0(is_integral_helper, signed char, true);
	_DEFINE_SPEC0(is_integral_helper, unsigned char, true);
	_DEFINE_SPEC0(is_integral_helper, short, true);
	_DEFINE_SPEC0(is_integral_helper, unsigned short, true);
	_DEFINE_SPEC0(is_integral_helper, int, true);
	_DEFINE_SPEC0(is_integral_helper, unsigned int, true);
	_DEFINE_SPEC0(is_integral_helper, long, true);
	_DEFINE_SPEC0(is_integral_helper, unsigned long, true);
	_DEFINE_SPEC0(is_integral_helper, long long, true);
	_DEFINE_SPEC0(is_integral_helper, unsigned long long, true);
} // namespace detail

template<typename T>
struct is_integral : detail::is_integral_helper<typename remove_cv<T>::type> { };

template <typename T>
inline constexpr bool is_integral_v = is_integral<T>::value;

namespace detail {
	template <typename T>
	struct is_floating_point_helper : integral_constant<bool, false> { };

	_DEFINE_SPEC0(is_floating_point_helper, float, true);
	_DEFINE_SPEC0(is_floating_point_helper, double, true);
	_DEFINE_SPEC0(is_floating_point_helper, long double, true);
} // namespace detail

template<typename T>
struct is_floating_point : detail::is_floating_point_helper<typename remove_cv<T>::type> { };

template <typename T>
inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

#undef _DEFINE_SPEC0

template<typename T>
struct is_arithmetic : public integral_constant<bool, is_integral<T>::value ||
				is_floating_point<T>::value> { };

namespace detail {

template<typename T, bool = is_arithmetic<T>::value>
struct is_unsigned : public integral_constant<bool, T(0) < T(-1)> { };

template<typename T>
struct is_unsigned<T, false> : public false_type { };

template<typename T, bool = is_arithmetic<T>::value>
struct is_signed : public integral_constant<bool, T(-1) < T(0)> { };

template<typename T>
struct is_signed<T, false> : public false_type { };

template<typename T>
struct type_identity { using type = T; };

template<typename T>
auto try_add_lvalue_reference(int) -> type_identity<T&>;
template<typename T>
auto try_add_lvalue_reference(...) -> type_identity<T>;

template<typename T>
auto try_add_rvalue_reference(int) -> type_identity<T&&>;
template<typename T>
auto try_add_rvalue_reference(...) -> type_identity<T>;

template<typename T> struct make_unsigned {};
template<> struct make_unsigned<char> { using type = unsigned char; };
template<> struct make_unsigned<signed char> { using type = unsigned char; };
template<> struct make_unsigned<unsigned char> { using type = unsigned char; };
template<> struct make_unsigned<short> { using type = unsigned short; };
template<> struct make_unsigned<unsigned short> { using type = unsigned short; };
template<> struct make_unsigned<int> { using type = unsigned int; };
template<> struct make_unsigned<unsigned int> { using type = unsigned int; };
template<> struct make_unsigned<long> { using type = unsigned long; };
template<> struct make_unsigned<unsigned long> { using type = unsigned long; };
template<> struct make_unsigned<long long> { using type = unsigned long long; };
template<> struct make_unsigned<unsigned long long> { using type = unsigned long long; };

} // namespace detail

template<typename T>
struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {};
template<typename T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

template<typename T>
struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {};
template<typename T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

template<typename T>
struct add_const
{ using type = const T; };

template<typename T>
struct make_unsigned : detail::make_unsigned<T> {};
template<typename T>
using make_unsigned_t = typename make_unsigned<T>::type;

template<typename T>
struct is_unsigned : public detail::is_unsigned<T>::type { };

template< class T >
inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

template<typename T>
struct is_signed : public detail::is_signed<T>::type { };

template< class T >
inline constexpr bool is_signed_v = is_signed<T>::value;

template<class T, class U>
struct is_same : false_type {};

template<class T>
struct is_same<T, T> : true_type {};

template<class T, class U>
inline constexpr bool is_same_v = is_same<T, U>::value;

template<class T>
struct is_void : is_same<T, void> {};

template<class T> struct is_const : false_type {};
template<class T> struct is_const<const T> : true_type {};

template <class T> struct is_reference : false_type {};
template <class T> struct is_reference<T&> : true_type {};
template <class T> struct is_reference<T&&> : true_type {};

template<typename T>
add_rvalue_reference_t<T> declval();

template<typename T>
struct remove_reference {
	typedef T type;
};

template<typename T>
struct remove_reference<T &> {
	typedef T type;
};

template<typename T>
struct remove_reference<T &&> {
	typedef T type;
};

template<typename T>
using remove_reference_t = typename remove_reference<T>::type;

template<class T> struct remove_const { typedef T type; };
template<class T> struct remove_const<const T> { typedef T type; };

template<class T> struct remove_volatile { typedef T type; };
template<class T> struct remove_volatile<volatile T> { typedef T type; };

namespace detail {
	template<typename... T>
	struct _void_impl_helper {
		using type = void;
	};
} // namespace detail

template<typename... T>
using void_t = typename detail::_void_impl_helper<T...>::type;

template<typename T>
struct add_pointer {
	using type = T *;
};

template<typename T>
using add_pointer_t = typename add_pointer<T>::type;

template<class T> struct remove_pointer { using type = T; };
template<class T> struct remove_pointer<T *> { using type = T; };
template<class T> struct remove_pointer<T * const> { using type = T; };
template<class T> struct remove_pointer<T * volatile> { using type = T; };
template<class T> struct remove_pointer<T * const volatile> { using type = T; };

template<typename T>
using remove_pointer_t = typename remove_pointer<T>::type;

namespace detail {
	template<bool, typename F, typename... Args>
	struct _invoke_result_impl_helper { };

	template <typename F, typename... Args>
	concept is_invokable_with = requires (F f, Args ...args) {
		f(static_cast<Args &&>(args)...);
	};

	template<typename F, typename... Args>
	struct _invoke_result_impl_helper<true, F, Args...> {
		using type = decltype(declval<F>() (declval<Args>()...));
	};
} // namespace detail

template<class F, class... ArgTypes>
struct invoke_result {
	using type = typename detail::_invoke_result_impl_helper<
			detail::is_invokable_with<F, ArgTypes...>,
			F, ArgTypes...>::type;
};

template<class F, class... ArgTypes>
using invoke_result_t = typename invoke_result<F, ArgTypes...>::type;

template<class F, class... ArgTypes>
struct is_invocable;

template<class F, class... ArgTypes>
requires detail::is_invokable_with<F, ArgTypes...>
struct is_invocable<F, ArgTypes...> : std::true_type {};

template<class F, class... ArgTypes>
requires (!detail::is_invokable_with<F, ArgTypes...>)
struct is_invocable<F, ArgTypes...> : std::false_type {};

template<class F, class... ArgTypes>
inline constexpr bool is_invocable_v = is_invocable<F, ArgTypes...>::value;

using detail::type_identity;

template<class T>
using type_identity_t = typename type_identity<T>::type;

template<bool B, class T = void>
struct enable_if {};

template<class T>
struct enable_if<true, T> { typedef T type; };

template<bool B, class T = void>
using enable_if_t = typename enable_if<B, T>::type;

template<class T, class... Args>
struct is_constructible : bool_constant<__is_constructible(T, Args...)> { };

template<class T, class... Args>
struct is_trivially_constructible : bool_constant<__is_trivially_constructible(T, Args...)> { };

template<class T>
struct is_trivially_copyable : bool_constant<__is_trivially_copyable(T)> { };

namespace detail {
	template<bool, class T, class... Args>
	struct is_nt_constructible_impl : false_type { };

	template<class T, class... Args>
	struct is_nt_constructible_impl<true, T, Args...> : bool_constant<noexcept(T(declval<Args>()...))> { };

	template<class T>
	struct is_nt_constructible_impl<true, T> : bool_constant<noexcept(T())> { };

	template<class T, class... Args>
	struct is_nt_constructible : is_nt_constructible_impl< is_constructible<T, Args...>::value, T, Args...> { };
} // namespace detail

template<class T, class... Args>
struct is_nothrow_constructible : detail::is_nt_constructible<T, Args...> { };

template<class T>
struct is_nothrow_default_constructible : detail::is_nt_constructible<T> { };

namespace detail {
	struct do_is_destructible_impl {
		template<typename T, typename = decltype(declval<T&>().~_T())>
		static true_type __test(int);

		template<typename>
		static false_type __test(...);
	};

	template<class T>
	struct is_destructible_impl : do_is_destructible_impl {
		using type = decltype(__test<T>(0));
	};
} // namespace detail

template<class T>
struct is_destructible : detail::is_destructible_impl<T>::type {};

#if defined(__clang__) && __clang_major__ >= 15
template<class T>
struct is_trivially_destructible : bool_constant<__is_trivially_destructible(T)> { };
#else
template<class T>
struct is_trivially_destructible : bool_constant<__has_trivial_destructor(T)> { };
#endif

template<class T, class... Args>
inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

template<class T, class... Args>
inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;

template<class T>
inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

template<class T>
inline constexpr bool is_destructible_v = is_destructible<T>::value;

template<class T>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;

template<class T>
struct is_trivially_copy_constructible :
	is_trivially_constructible<T, typename add_lvalue_reference<
	typename add_const<T>::type>::type> {};

template<class T>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;

template<class T>
struct is_trivially_move_constructible :
	is_trivially_constructible<T, typename add_rvalue_reference<T>::type> {};

template<class T>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;

template<class T>
struct is_default_constructible : is_constructible<T> {};

template<class T>
struct is_copy_constructible :
	is_constructible<T, typename add_lvalue_reference<
	typename add_const<T>::type>::type> {};

template<class T>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;

template<class T>
struct is_move_constructible :
	is_constructible<T, typename add_rvalue_reference<T>::type> {};

template<class T>
inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

template<class T>
inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;

template<class T>
inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;

template<class T, typename U>
struct is_assignable : bool_constant<__is_assignable(T, U)> { };

template<class T>
struct is_move_assignable : is_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_rvalue_reference<T>::type> {};

template<class T>
struct is_copy_assignable : is_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_lvalue_reference<const T>::type> {};

template<class T, class U>
struct is_trivially_assignable : bool_constant<__is_trivially_assignable(T, U)> { };

template<class T>
struct is_trivially_move_assignable : is_trivially_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_rvalue_reference<T>::type> {};

template<class T>
struct is_trivially_copy_assignable : is_trivially_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_lvalue_reference<const T>::type> {};

template<class T, class U>
inline constexpr bool is_assignable_v = is_trivially_assignable<T, U>::value;

template<class T>
inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;

template<class T>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;

template<class T, class U>
inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;

template<class T>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;

template<class T>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;

namespace detail {

	template<class>
	using true_type_for = true_type;

	template<class T>
	auto test_returnable(int) -> true_type_for<T()>;
	template<class T>
	auto test_returnable(...) -> false_type;

	template<class From, class To>
	auto test_nonvoid_convertible(int) -> true_type_for<
		decltype(declval<void(&)(To)>()(declval<From>()))>;

	template<class From, class To>
	auto test_nonvoid_convertible(...) -> false_type;
} // namespace detail

template<class From, class To>
struct is_convertible : integral_constant<bool,
	(decltype(detail::test_returnable<To>(0))::value &&
	decltype(detail::test_nonvoid_convertible<From, To>(0))::value) ||
	(is_void<From>::value && is_void<To>::value)> {};

template<class From, class To>
inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

template <class From, class To>
concept convertible_to = is_convertible_v<From, To> && requires { static_cast<To>(declval<From>()); };

template<bool B, class T, class F>
struct conditional { typedef T type; };

template<class T, class F>
struct conditional<false, T, F> { typedef F type; };

template<bool B, typename T, typename F>
using conditional_t = typename std::conditional<B, T, F>::type;

template<class T>
struct is_array : std::false_type {};

template<class T>
struct is_array<T[]> : std::true_type {};

template<class T, size_t N>
struct is_array<T[N]> : std::true_type {};

namespace detail {
	template<class T>
	struct is_pointer_helper : false_type { };

	template<class T>
	struct is_pointer_helper<T *> : true_type { };
} // namespace detail

template<class T>
struct is_pointer : detail::is_pointer_helper<typename std::remove_cv<T>::type> { };

template<class T>
inline constexpr bool is_pointer_v = is_pointer<T>::value;

template<class T>
struct remove_extent { typedef T type; };

template<class T>
struct remove_extent<T[]> { typedef T type; };

template<class T, size_t N>
struct remove_extent<T[N]> { typedef T type; };

template<class T>
struct is_function : std::integral_constant<
		bool,
		!std::is_const<const T>::value && !std::is_reference<T>::value >
{};

template<class T>
struct is_enum : std::bool_constant<__is_enum(T)> { };

template<class T>
inline constexpr bool is_enum_v = is_enum<T>::value;

template<class T>
struct decay {
private:
	typedef typename std::remove_reference<T>::type U;
public:
	typedef typename std::conditional<
		std::is_array<U>::value,
		typename std::remove_extent<U>::type*,
		typename std::conditional<
			std::is_function<U>::value,
		typename std::add_pointer<U>::type,
		typename std::remove_cv<U>::type
			>::type
	>::type type;
};

// primary template (used for zero types)
template <class...>
struct common_type {};

// one type
template <class T>
struct common_type<T> : common_type<T, T> {};

// two types
template <class T1, class T2>
using cond_t = decltype(false ? std::declval<T1>() : std::declval<T2>());

template <class T1, class T2, class=void>
struct common_type_2_impl {};

template <class T1, class T2>
struct common_type_2_impl<T1, T2, void_t<cond_t<T1, T2>>> {
	using type = typename std::decay<cond_t<T1, T2>>::type;
};

template <class T1, class T2>
struct common_type<T1, T2>
: common_type_2_impl<typename std::decay<T1>::type,
	typename std::decay<T2>::type>
{};

// 3+ types
template <class AlwaysVoid, class T1, class T2, class...R>
struct common_type_multi_impl {};

template <class T1, class T2, class...R>
struct common_type_multi_impl<
void_t<typename common_type<T1, T2>::type>, T1, T2, R...>
: common_type<typename common_type<T1, T2>::type, R...> {};


template <class T1, class T2, class... R>
struct common_type<T1, T2, R...>
: common_type_multi_impl<void, T1, T2, R...> {};

template< class... T >
using common_type_t = typename common_type<T...>::type;

namespace detail {
	template <bool, typename>
	struct underlying_type_helper { };

	template <typename T>
	struct underlying_type_helper<true, T> {
		using type = __underlying_type(T);
	};
} // namespace detail

template <typename T>
struct underlying_type : detail::underlying_type_helper<
			is_enum_v<T>,
			T
		> { };

template <typename T>
using underlying_type_t = typename underlying_type<T>::type;

} // namespace std

#endif // !defined(CXXSHIM_INTEGRATE_GCC)

#endif // _CXXSHIM_TYPE_TRAITS
